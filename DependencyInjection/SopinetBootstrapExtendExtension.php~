<?php
/**
* This file is part of SopinetBootstrapExtendBundle.
*
* (c) 2013 by Fernando Hidalgo - Sopinet
*/

namespace Sopinet\Bundle\BootstrapExtendBundle\DependencyInjection;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface;
use Symfony\Component\DependencyInjection\Loader;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

/**
* SopinetBootstrapExtendExtension
*
* @codeCoverageIgnore
*/
class SopinetBootstrapExtendExtension extends Extension implements PrependExtensionInterface
{
    /**
		* {@inheritDoc}
		*/
    public function load(array $configs, ContainerBuilder $container)
    {
        $configuration = new Configuration();
        $this->processConfiguration($configuration, $configs);

        $loader = new Loader\YamlFileLoader(
            $container,
            new FileLocator(__DIR__.'/../Resources/config')
        );
        $loader->load('services.yml');
    }

    /**
		* {@inheritDoc}
		*/
    public function prepend(ContainerBuilder $container)
    {
        $bundles = $container->getParameter('kernel.bundles');

        $configs = $container->getExtensionConfig($this->getAlias());
        $config = $this->processConfiguration(new Configuration(), $configs);

        // Add includes if Assetic is activated
        if (isset($bundles['AsseticBundle'])) {
            $this->addIncludes($container, $config);
        }
    }

    /**
		* Add includes
		*
		* @param ContainerBuilder $container The service container
		* @param array $config The bundle configuration
		*
		* @return void
		*
		* @SuppressWarnings(PHPMD.UnusedLocalVariable)
		*/
    private function addIncludes(ContainerBuilder $container, array $config)
    {
        foreach ($container->getExtensions() as $name => $extension) {
            switch ($name) {
                case 'assetic':
                    $container->prependExtensionConfig(
                        $name,
                        array(
                            'assets' => $this->buildAsseticConfig($config)
                        )
                    );
                    break;
            }
        }
    }

    private function buildAsseticConfig(array $config)
    {
        $output = array();
        if ($config['less_filter'] !== 'none') {
            $output['bootstrap_css'] = $this->buildAsseticBootstrapCssWithLessConfig($config);
        } else {
            $output['bootstrap_css'] = $this->buildAsseticBootstrapCssWithoutLessConfig($config);
        }
        $output['bootstrap_js'] = $this->buildAsseticBootstrapJsConfig($config);
        $output['jquery'] = $this->buildAsseticJqueryConfig($config);
        return $output;
    }

    private function buildAsseticBootstrapCssWithoutLessConfig(array $config)
    {
        $inputs = array(
            $config['assets_dir'].'/docs/assets/css/bootstrap.css',
        );

        if ($config['include_responsive'] === true) {
            $inputs[] = $config['assets_dir'].'/docs/assets/css/bootstrap-responsive.css';
        }

        return array(
            'inputs' => $inputs,
            'filters' => array('cssrewrite'),
            'output' => $config['output_dir'].'/css/bootstrap.css'
        );
    }

    private function buildAsseticBootstrapCssWithLessConfig(array $config)
    {
        $inputs = array(
            $config['assets_dir'].'/less/bootstrap.less'
        );

        if ($config['include_responsive'] === true) {
            $inputs[] = $config['assets_dir'].'/less/responsive.less';
        }

        $inputs[] = __DIR__.'/../Resources/less/form.less';

        return array(
            'inputs' => $inputs,
            'filters' => array($config['less_filter'], 'cssrewrite'),
            'output' => $config['output_dir'].'/css/bootstrap.css'
        );
    }

    private function buildAsseticBootstrapJsConfig(array $config)
    {
        return array(
            'inputs' => array(
                $config['assets_dir'].'/js/bootstrap-transition.js',
                $config['assets_dir'].'/js/bootstrap-alert.js',
                $config['assets_dir'].'/js/bootstrap-button.js',
                $config['assets_dir'].'/js/bootstrap-carousel.js',
                $config['assets_dir'].'/js/bootstrap-collapse.js',
                $config['assets_dir'].'/js/bootstrap-dropdown.js',
                $config['assets_dir'].'/js/bootstrap-modal.js',
                $config['assets_dir'].'/js/bootstrap-tooltip.js',
                $config['assets_dir'].'/js/bootstrap-popover.js',
                $config['assets_dir'].'/js/bootstrap-scrollspy.js',
                $config['assets_dir'].'/js/bootstrap-tab.js',
                $config['assets_dir'].'/js/bootstrap-typeahead.js',
                $config['assets_dir'].'/js/bootstrap-affix.js',
                __DIR__.'/../Resources/js/bc-bootstrap-collection.js'
            ),
            'output' => $config['output_dir'].'/js/bootstrap.js'
        );
    }

    private function buildAsseticJqueryConfig(array $config)
    {
        return array(
            'inputs' => array($config['jquery_path']),
            'output' => $config['output_dir'].'/js/jquery.js'
        );
    }
}
